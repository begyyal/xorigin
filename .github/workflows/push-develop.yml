name: CI

on:
  push:
    branches: [ develop ]

jobs:

  dev-ci:
    runs-on: ubuntu-latest
    if: ${{ github.actor != '' }}

    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: debug
      run: echo ${{ github.actor }}

    - name: Prepare conditions
      id: ready
      run: |
        git config --global user.email "begyyal@gmail.com"
        git config --global user.name "begyyal-ghost"
        fb=$(./.github/workflows/sh/find_pr_branch.sh feature ${{ github.event_path }})
        echo "::set-output name=issue-no::${fb#feature/}"

    - name: Create dev-tmp
      id: temp
      if: ${{ steps.ready.outputs.issue-no != '' }}
      run: |
        tmpb=dev-tmp/${{ steps.ready.outputs.issue-no }}
        git push origin $tmpb -d --quiet || :
        git checkout -b $tmpb
        git push origin $tmpb
        echo "::set-output name=branch::$tmpb"

    - name: Revise comments
      if: ${{ steps.ready.outputs.issue-no != '' }}
      uses: begyyal/act_revise_comments@v1
      with:
        prefix: "#${{ steps.ready.outputs.issue-no }}"
        branch: ${{ steps.temp.outputs.branch }}

    - name: Fetch dev-tmp
      if: ${{ steps.ready.outputs.issue-no != '' }}
      run: |
        git checkout develop
        git branch -D ${{ steps.temp.outputs.branch }}
        git fetch 
        git checkout ${{ steps.temp.outputs.branch }}

    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        java-version: '15'
        distribution: 'adopt'

    - name: Build with Gradle
      run: |
        chmod +x ./cmd/gradlew
        ./cmd/gradlew build -b ./lib/build.gradle
        ./cmd/gradlew build -b ./cmd/build.gradle

    - name: Test
      run: ./test.sh

    - name: Push dev-tmp
      id: code-update
      if: ${{ steps.ready.outputs.issue-no != '' }}
      run: |
        applied=$(git diff --exit-code --ignore-cr-at-eol --ignore-space-at-eol --quiet || echo 1)
        [ -z $applied ] || (git add . && git commit -m "BY-CI" && git push origin HEAD)
        echo "::set-output name=applied::${applied}"

    - name: Mark success of status checks
      id: status-checks
      if: ${{ steps.ready.outputs.issue-no != '' }}
      run: |
        head=$(git log --pretty=oneline | head -n 1 | cut -d ' ' -f 1)
        echo "::set-output name=head::${head}"
        curl \
          -X POST \
          -H "AUTHORIZATION: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${head} \
          -d '{"state":"success","context":"ci-passed-ph2"}'

    - name: Await sequentially
      uses: begyyal/act_await_workflow_runs@v1
      with:
        workflowName: CI

    - name: Push dev if needed
      id: push-dev
      if: ${{ steps.code-update.outputs.applied != '' }}
      run: |
        git checkout ${{ github.ref_name }}
        git cherry-pick ${{ steps.status-checks.outputs.head }}
        git push origin ${{ github.ref_name }} || conflict=1
        echo "::set-output name=conflict::$conflict"

    - name: Handle conflict
      id: handle-conflict
      if: ${{ steps.push-dev.outputs.conflict != '' }}
      run: |
        git checkout ${{ steps.temp.outputs.branch }}
        git reset --hard HEAD^
        head=$(git log --pretty=oneline | head -n 1 | cut -d ' ' -f 1)
        echo "::set-output name=head::${head}"
        curl \
          -X POST \
          -H "AUTHORIZATION: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${head} \
          -d '{"state":"success","context":"ci-passed-ph2"}'

    - name: Push master
      run: |
        head=${{ steps.handle-conflict.outputs.head }}
        [ -z "$head" ] && head=${{ steps.status-checks.outputs.head }} || :
        [ -z "$head" ] && head=${{ github.sha }} || :
        branch=${{ steps.temp.outputs.branch }}
        [ -z "$branch" ] && branch=${{ github.ref_name }} || :
        git fetch
        git checkout -f master
        git cherry-pick $(git log $branch ${{ github.event.before }}..$head --pretty=oneline | cut -d " " -f 1 | tac)
        git push origin master

    - name: Prepare to close issue
      id: ready-closing
      if: ${{ steps.ready.outputs.issue-no != '' }}
      run: |
        git clone https://github.com/begyyal/act_access_ghra.git
        issue_url_base=${{ github.event.pull_request.issue_url }}
        echo "::set-output name=issue-url::${issue_url_base%/*}/${{steps.ready.outputs.issue-no}}"

    - name: Close issue
      if: ${{ steps.ready.outputs.issue-no != '' }}
      uses: ./act_access_ghra
      with:
        url: ${{ steps.ready-closing.outputs.issue-url }}
        method: 'PATCH'
        args: '{"state":"closed"}'

    - name: Rollback
      if: failure()
      run: |
        git checkout develop
        git reset --hard ${{ github.event.before }}
        token64=$(printf "%s""x-access-token:${{ secrets.PAT_REPO }}" | base64)
        git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $token64"
        git push origin develop -f

    - name: Termination
      if: always()
      run: |
        tmpb=${{ steps.temp.outputs.branch }}
        [ -n "$tmpb" ] && git push origin $tmpb -d || :
